# Trackiffer 0.1.7 

Trackiffer is a dead-simple, yet suprisingly powerful, drop-in script for tracking GA events.

It takes a simple set of CSS selectors and tracking rules, and tracks a wide variety of elements in a number of really cool ways.

So what does it handle for you? 

- Tracking events on forms (submit), select elements (change), text inputs (blur), and anything else (click).
- Provides a super-helpful debug mode you can use for setting up your events.
- Loads from a bookmarklet, so you can even test your rules out on sites you don't have access to yet.
- Loading jQuery. Trackiffer depends on jQuery, but if you _must_ deploy it on a site without jQuery, Trackiffer will load it for you.
- Delay outbound links AND form submissions by 100ms to maximize your chances of tracking the event.

## When would you use Trackiffer?

Whenever you want to track particular events and don't want to spend a few hours scripting it.
Trackify simplifies the setup and testing of GA events like whoa.

## Why does this exist?

The Viget marketing people are awesome - when we remake a site, they put event tracking on the OLD site, then track the same actions on the new one when it launches.

The problem? This means we set up event tracking twice per site, and it's not a very repeatable or simple process....at least, until now. 

I wanted to make a script that handled all the messy aspects of tracking, and enabled our GA wizards simply put together a ruleset and deploy, maybe even without developer help.

## Use

Add the trackiffer script to the end of your page's body tag. After that, add some code like this:

	<script type="text/javascript">
		trackiffer({
			'a' : ['Link', 'Social', '#TEXT#'],
			'select' : ['Outbound', 'Social', '#VALUE#'],
			'.comment_form' : ['Outbound', 'Social', 'Left Sidebar - Twitter - #ACTION#'],
			'.outbound_form' : ['#CLASS# Form', '#METHOD#', function(N){return N.find("input#agree").val()}]
		});
	</script>

The left side is the jQuery selector you'd like to use, and the right side is the event data you want to track.
	
Any #TOKEN# will be replaced at the time of event:

- #TEXT# by the result of $element.text();
- #VALUE# by the result of $element.val();
- #ANYTHING_ELSE# is replaced by the result of $element.attr('anything_else');

In extreme cases, you can just pass callbacks instead of strings. This lets you do all kinds of fancy stuff - 
in the example, we're recording the value of a particular input at the moment the form submits.

## Debug mode

You definitely want to run Trackiffer in debug mode to test this all out. It's simple:  

	trackiffer('debug');

Debug mode will cancel all tracked clicks (so you stay on the current page) and log tons of cool info in the console. 
You can also do a quick debug by visiting the url in question with a #trackiffer_debug hash:

	http://example.com/#trackiffer_debug

## Is Trackiffer broken?

MAYBE! Trackiffer is very new and relatively untested in the wild.
If you experience issues, please report them [on the issues page](https://github.com/averyvery/trackiffer/issues).
	
## Bookmarklet

Once you download Trackiffer, you can install the bookmarklet from the index.html page. 
This will drop trackiffer onto any page you view and set debug mode - you can then execute and test trackiffer({rules}) from your browser's console.

## Thanks To

[Paul Koch](http://www.viget.com/about/team/pkoch/) and the rest of the Viget marketers for being GA badasses and always asking us to do cool stuff with analytics.
