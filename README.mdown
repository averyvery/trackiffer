# Trackiffer 0.3

Trackiffer is a dead-simple, yet suprisingly powerful, drop-in script for tracking 
[GA events](http://code.google.com/apis/analytics/docs/tracking/eventTrackerGuide.html), 
[social actions](http://code.google.com/apis/analytics/docs/gaJS/gaJSApiSocialTracking.html), and 
[setting custom vars](http://code.google.com/apis/analytics/docs/tracking/gaTrackingCustomVariables.html).

It takes a simple set of CSS selectors and tracking rules, and tracks a wide variety of elements in a number of really cool ways.

So what does it handle for you? 

- Tracking events on forms (submit), select elements (change), text inputs (blur), and anything else (click).
- Provides a super-helpful debug mode you can use for setting up your events.
- Loads from a bookmarklet, so you can even test your rules out on sites you don't have access to yet.
- Loading jQuery. Trackiffer depends on jQuery, but if you _must_ deploy it on a site without jQuery, Trackiffer will load it for you.
- Delay outbound links AND form submissions by 100ms to maximize your chances of tracking the event.

## Adding to your site

Add the trackiffer script to the end of your page's body tag, and call trackiffer like so:

	<script type="text/javascript" src="/js/trackiffer.min.js"></script>
	<script type="text/javascript">
		trackiffer({
			'a.blog' : ['_trackEvent', 'Link', 'Social', 'Twitter']
		});
	</script>

Alternately, you can add your tracking code to the bottom of trackiffer.min.js and deploy that file on its own. 
I recommend renaming it to trackiffer-[sitename].min.js when using this method.

## Use

	trackiffer({

		// _trackEvent
		'a' : ['_trackEvent', 'Link', 'Social', '{{text}}', 1],
		'select' : ['_trackEvent', 'Outbound', 'Social', '{{value}}'],
		'.comment_form' : ['_trackEvent', 'Outbound', 'Social', 'Left Sidebar - Twitter - {{action}}'],
		'.outbound_form' : ['_trackEvent', '{{class}} Form', '{{method}}', function(N){return N.find("input#agree").val()}]

		// _trackSocial
		'.retweet' : ['_trackSocial', 'Twitter', 'Retweet', '{{href}}', window.location.href],

		// _setCustomVar - remember to track an event after this, or the value won't be saved!
		'select.gender' : ['_setCustomVar', 1, 'Gender', '{{value}}', 2]

	});

The left side is the jQuery selector you'd like to use, and the right side is the event data you want to track.
	
Any {{token}} will be replaced at the time of event:

- {{text}} by the result of $element.text();
- {{value}} by the result of $element.val();
- {{anything_else}} is replaced by the result of $element.attr('anything_else');

In extreme cases, you can just pass callbacks instead of strings. This lets you do all kinds of fancy stuff - 
in the example, we're recording the value of a particular input at the moment the form submits.

## Extra Configuration

	trackiffer({
		'a' : {
			delay : false,
			delegate : 'body',
			rule : ['_trackEvent', 'Link', 'Social', '{{text}}', 1]
		}
	});

By assigning an object literal to your selector, you get two new options ('rule' is your event data, and it's required):

- delay - by setting delay to <code>false</code>, you override trackiffer's default outbound behavior. The event will no longer cancel, and the user
will no longer be forwarded to a new URL after 100ms.
- delegate - setting a <code>delegate</code> option allows you to bind events to DOM elements that might not exist yet on the page. 
Read more about delegate [here](http://api.jquery.com/delegate/). At the moment, these links WILL NOT be hightlighted, but you can still
test them by reading the console.

## Debug mode

You definitely want to run Trackiffer in debug mode to test this all out. It's simple:  

	trackiffer('debug');

Debug mode will cancel all tracked clicks (so you stay on the current page) and log tons of cool info in the console. 
You can also do a quick debug by visiting the url in question with a #trackiffer_debug hash:

	http://example.com/#trackiffer_debug

Hit escape to remove the debugging outlines.

## Is Trackiffer broken?

MAYBE! Trackiffer is very new and relatively untested in the wild.
If you experience issues, please report them [on the issues page](https://github.com/averyvery/trackiffer/issues).
	
## Bookmarklet

Once you download Trackiffer, you can install the bookmarklet from the index.html page. 
This will drop trackiffer onto any page you view and set debug mode - you can then execute and test trackiffer({rules}) from your browser's console.

## Why does this exist?

The Viget marketing people are awesome - when we remake a site, they put event tracking on the OLD site, then track the same actions on the new one when it launches.

The problem? This means we set up event tracking twice per site, and it's not a very repeatable or simple process....at least, until now. 

I wanted to make a script that handled all the messy aspects of tracking, and enabled our GA wizards simply put together a ruleset and deploy, maybe even without developer help.

## Thanks To

[Paul Koch](http://www.viget.com/about/team/pkoch/) and the rest of the Viget marketers for being GA badasses and always asking us to do cool stuff with analytics.
